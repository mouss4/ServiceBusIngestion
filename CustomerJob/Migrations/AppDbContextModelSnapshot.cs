// <auto-generated />
using System;
using CustomerJob.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CustomerJob.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CustomerJob.Entities.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BrandId");

                    b.HasIndex("BrandId")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("CustomerJob.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("CountryIso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyIso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastChangeDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SegmentId")
                        .HasColumnType("integer");

                    b.HasKey("CustomerId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CustomerJob.Entities.CustomerBrand", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.HasKey("CustomerId", "BrandId");

                    b.HasIndex("BrandId");

                    b.ToTable("CustomerBrands");
                });

            modelBuilder.Entity("CustomerJob.Entities.CustomerBrand", b =>
                {
                    b.HasOne("CustomerJob.Entities.Brand", "Brand")
                        .WithMany("CustomerBrands")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerJob.Entities.Customer", "Customer")
                        .WithMany("CustomerBrands")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerJob.Entities.Brand", b =>
                {
                    b.Navigation("CustomerBrands");
                });

            modelBuilder.Entity("CustomerJob.Entities.Customer", b =>
                {
                    b.Navigation("CustomerBrands");
                });
#pragma warning restore 612, 618
        }
    }
}
